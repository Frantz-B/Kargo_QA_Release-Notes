name: Generate Release Notes with Milestone PRs

on:
  release:
    types: [published] # This workflow runs when a release is published

jobs:
  generate_release_notes:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create/update the release notes file
      issues: read    # To read milestone and PR data
      pull-requests: read # To read PR data and labels

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Release Information
        id: get_release
        run: |
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          echo "Release Tag: $RELEASE_TAG"
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Find Milestone by Tag Number in Title
        id: find_milestone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="${{ steps.get_release.outputs.release_tag }}"
          # Extract just the version number (ex: v4.2.0 or 4.2.0)
          VERSION="${RELEASE_TAG#v}"
          # Find milestone where the title contains the version number (case-insensitive)
          MILESTONE_ID=$(gh api \
            --jq '.[] | select((.title | ascii_downcase) | test("'${VERSION,,}'")) | .number' \
            /repos/${{ github.repository }}/milestones \
            --paginate | head -n1)

          if [ -z "$MILESTONE_ID" ]; then
            echo "::warning::No milestone found matching version: $VERSION. Skipping PR categorization."
            echo "milestone_id=" >> $GITHUB_OUTPUT
          else
            echo "Found Milestone ID: $MILESTONE_ID"
            echo "milestone_id=$MILESTONE_ID" >> $GITHUB_OUTPUT
          fi

      - name: Get PRs for Milestone and Categorize
        id: get_prs
        if: success() && steps.find_milestone.outputs.milestone_id != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MILESTONE_ID: ${{ steps.find_milestone.outputs.milestone_id }}
        run: |
          BUG_PRS=""
          ENHANCEMENT_PRS=""
          OTHER_PRS=""

          # Fetch all closed issues associated with the milestone, filter for PRs only
          gh api \
            --paginate \
            "/repos/${{ github.repository }}/issues?state=closed&milestone=${{ env.MILESTONE_ID }}" \
            --jq '.[] | select(.pull_request) | {number: .number, title: .title, url: .html_url, labels: [.labels[].name]}' | \
          while IFS= read -r pr; do
            PR_NUMBER=$(echo "$pr" | jq -r '.number')
            PR_TITLE=$(echo "$pr" | jq -r '.title')
            PR_URL=$(echo "$pr" | jq -r '.url')
            PR_LABELS=$(echo "$pr" | jq -r '.labels[]?')

            IS_BUG=false
            IS_ENHANCEMENT=false

            for label in $PR_LABELS; do
              case "$label" in
                "bug" | "Bug" | "fix" | "Bugfix" | "defect")
                  IS_BUG=true
                  ;;
                "enhancement" | "Enhancement" | "feature" | "Feature")
                  IS_ENHANCEMENT=true
                  ;;
              esac
            done

            PR_LINE="- #${PR_NUMBER} [${PR_TITLE}](${PR_URL})"

            if $IS_BUG; then
              BUG_PRS+="$PR_LINE\n"
            elif $IS_ENHANCEMENT; then
              ENHANCEMENT_PRS+="$PR_LINE\n"
            else
              OTHER_PRS+="$PR_LINE\n"
            fi
          done

          echo "bug_prs<<EOF" >> $GITHUB_OUTPUT
          echo -e "$BUG_PRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "enhancement_prs<<EOF" >> $GITHUB_OUTPUT
          echo -e "$ENHANCEMENT_PRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "other_prs<<EOF" >> $GITHUB_OUTPUT
          echo -e "$OTHER_PRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Bug PRs: $BUG_PRS"
          echo "Enhancement PRs: $ENHANCEMENT_PRS"
          echo "Other PRs: What the F "

      - name: Generate Release Notes Content
        id: generate_content
        run: |
          RELEASE_NAME="${{ github.event.release.name }}"
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          if [ -z "$RELEASE_NAME" ]; then
            RELEASE_NAME="$RELEASE_TAG"
          fi
          RELEASE_BODY="${{ github.event.release.body }}"

          NOTES_CONTENT="ðŸš€ - BUILD RELEASE - ðŸš€\n"
          NOTES_CONTENT="* ${RELEASE_NAME} was released on Date\n\n"

          if [ -n "${{ steps.get_prs.outputs.bug_prs }}" ]; then
            NOTES_CONTENT+="### :bug: Bug Fixes\n"
            NOTES_CONTENT+="${{ steps.get_prs.outputs.bug_prs }}\n"
          fi

          if [ -n "${{ steps.get_prs.outputs.enhancement_prs }}" ]; then
            NOTES_CONTENT+="### :sparkles: Enhancements\n"
            NOTES_CONTENT+="${{ steps.get_prs.outputs.enhancement_prs }}\n"
          fi

          if [ -n "${{ steps.get_prs.outputs.other_prs }}" ]; then
            NOTES_CONTENT+="### :gear: Other Changes\n"
            NOTES_CONTENT+="${{ steps.get_prs.outputs.other_prs }}\n"
          fi

          # Append any existing release body
          if [ -n "$RELEASE_BODY" ]; then
            NOTES_CONTENT+="\n---\n"
            NOTES_CONTENT+="$RELEASE_BODY\n"
          fi

          echo "notes_content<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Release Description
        if: success() && steps.find_milestone.outputs.milestone_id != ''
        uses: actions/github-script@v7
        with:
          script: |
            const releaseId = context.payload.release.id;
            const newBody = `${{ steps.generate_content.outputs.notes_content }}`;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: newBody
            });
